import telebot
from telebot import types
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import subprocess
import socket
import threading
from configparser import ConfigParser
from telebot import types
import logging
import signal
import os
import re
import requests
import json
import urllib3.exceptions
from datetime import datetime

# coding: utf8

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
config = ConfigParser()
config.read("/opt/kaspersky/kuma/correlator/0b9200ae-d5a9-41ce-bf7b-c16814ed9524/scripts/bot.conf")
logger = telebot.logger
logging.basicConfig(format='%(asctime)s - %(levelname)s - %(message)s', level=logging.DEBUG)
telebot.logger.setLevel(logging.DEBUG)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ - START
BOT_TOKEN = config["Settings"]["BOT_TOKEN"]
bot = telebot.TeleBot(BOT_TOKEN)
RestrictedCommands = config["Settings"]["RestrictedCommands"].split(',')
allowed_users = []
for key in config['AllowedUsers']: allowed_users.append(int(key))
ruleNameRegex = r"–ü—Ä–∞–≤–∏–ª–æ:\s+(.*?)\n"
kumaAddr = config["Settings"]["kumaAddr"]
kumaBearer = config["Settings"]["kumaBearer"]
kumaGetAlerts = "https://"+kumaAddr+":7223/api/v1/alerts/"
kumaCloseAlerts = "https://"+kumaAddr+":7223/api/v1/alerts/close"
kumaServices = "https://"+kumaAddr+":7223/api/v1/services"
kumaBackup = "https://"+kumaAddr+":7223/api/v1/system/backup"
backup_dir = "/tmp"
os.makedirs(backup_dir, exist_ok=True)  # Ensure /tmp exists
backupName = os.path.join(backup_dir, f"kuma_backup_{datetime.now().strftime('%d-%m-%Y_%H-%M-%S')}.tar.gz")
headers = {"Authorization": "Bearer " + kumaBearer}
kumaUser = config["Settings"]["kumaUser"]
kumaPassword = config["Settings"]["kumaPassword"]
cooks = {}
cookie_value = ""
reps = []
session = requests.Session()
# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ - END


def privateApi():
    url = f'https://{kumaAddr}:7220/api/login'
    x_kuma_location = f'https://{kumaAddr}:7220/login'

    body = {
    'login': kumaUser,
    'password': kumaPassword
    }

    headersPriv = {'x-kuma-location': x_kuma_location}    
    response = session.post(url, headers=headersPriv, data=json.dumps(body), verify=False)

    if response.status_code == 200:
        xsrf_token = re.match('XSRF-TOKEN=([^;]+)', response.headers['Set-Cookie']).group(1)
        kuma_m_sid = re.match('.+kuma_m_sid=([^;]+)', response.headers['Set-Cookie']).group(1)
        cookie_value = 'XSRF-TOKEN='+xsrf_token+'; kuma_m_sid='+kuma_m_sid+'; x-xsrf-token: '+xsrf_token
        headersPriv = {'cookie': cookie_value}
        return cooks
cooks = privateApi()

def find_id_by_substring(json_data, search_substring):
    matching_ids = [item.get('id') for item in json_data if search_substring.lower() in item.get('name').lower() and item.get('status').lower() != "closed"]
    return matching_ids


@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    if message.from_user.id in allowed_users:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        button_hello = types.KeyboardButton(f"üïπÔ∏è –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã")
        button_hello2 = types.KeyboardButton(f"üïπÔ∏è Backup")
        button_hello3 = types.KeyboardButton(f"üïπÔ∏è –°–ø–∏—Å–æ–∫ –æ—Ç—á–µ—Ç–æ–≤")
        markup.add(button_hello, button_hello2, button_hello3)
        bot.reply_to(message, f"–î–∞, –≤–ª–∞–¥—ã–∫–∞, –ø—Ä–∏–∫–∞–∑—ã–≤–∞–π!", reply_markup=markup)
    else:
        bot.reply_to(message, f"–£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫–æ –º–Ω–µ!")

@bot.message_handler(func=lambda message: message.text.startswith('\\cmd ') or message.text.startswith(r'\cmd '))
def execute_command(message):
    if message.from_user.id in allowed_users:
        try:
            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –ø–æ—Å–ª–µ –∫–ª—é—á–∞ \cmd
            command = message.text.split('\\cmd ')[1] if '\\cmd ' in message.text else message.text.split(r'\cmd ')[1]
            # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏     ['rm', 'sudo', 'shutdown', 'passwd', 'reboot', 'init']
            if any(forbidden in command for forbidden in RestrictedCommands):
                raise ValueError(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã!")
            process = subprocess.run(command, shell=True, check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, universal_newlines=True)
            response = process.stdout if process.stdout else process.stderr
            bot.reply_to(message, response)
        except Exception as e:
            bot.reply_to(message, f"Error occured:\n\n{str(e)}")
    else:
        bot.reply_to(message, f"–£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫–æ –º–Ω–µ!")


@bot.message_handler(func=lambda message: message.text.startswith(f"üïπÔ∏è"))
def handle_hello_world(message):
    if message.from_user.id in allowed_users:
        chat_id = message.chat.id
        if message.text == "üïπÔ∏è –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã":
            bot.delete_message(chat_id, message.message_id)
            bot.send_message(chat_id, f"–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã: üîΩ")
            response = requests.request("GET", kumaServices, headers=headers, verify=False)
            json_data = json.loads(response.text)
            string_acc = ""
            light = ""
            print(json_data)
            for item in json_data:
                if item.get('status') == "green":
                    light = "üü¢"
                elif item.get('status') == "blue":
                    light = "üîµ"
                elif item.get('status') == "yellow":
                    light = "üü°"                
                else:
                    light = "üî¥"
                string_acc += light + " " + item.get('name') + "\n"
            bot.send_message(chat_id, string_acc)
        if message.text == "üïπÔ∏è Backup":
            response = requests.request("GET", kumaBackup, headers=headers, verify=False)
            bot.send_message(chat_id, f"–ò–¥–µ—Ç —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞, –æ–∂–∏–¥–∞–π—Ç–µ... ‚åõ")            
            with open(backupName, "wb") as f:
                f.write(response.content)
            backup_size = os.path.getsize(backupName) >> 20
            if int(response.status_code) == 200:
                bot.delete_message(chat_id, message.message_id)
                bot.send_message(chat_id, f"‚úÖ –ë–µ–∫–∞–ø —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n{backupName}\n–†–∞–∑–º–µ—Ä: {backup_size} MB")
            else:
                bot.delete_message(chat_id, message.message_id)
                bot.send_message(chat_id, f"‚õî –° –±–µ–∫–∞–ø–æ–º —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!")
        if message.text == "üïπÔ∏è –°–ø–∏—Å–æ–∫ –æ—Ç—á–µ—Ç–æ–≤":                
            url = f'https://{kumaAddr}:7220/api/private/reports/?order=-createdAt&limit=250'
            response = session.get(url, headers = cooks, verify=False)
            if int(response.status_code) == 200:
                bot.delete_message(chat_id, message.message_id)
                json_data = json.loads(response.text)
                global reps
                reps = []
                cnt = 0
                for item in json_data:
                    string = "{\"cmd\":\"/report_" + str(cnt) + "\",\"num\":\"" + str(cnt) + "\",\"id\":\"" +  item.get('id') + "\",\"name\":\"" + item.get('name') + "\",\"date\":\"" + str(datetime.fromtimestamp(item.get('createdAt') / 1000)) + "\"}"
                    reps.append(string)
                    cnt += 1
                bot.send_message(chat_id, f"{str(reps)[1:-1]}")
            else:
                bot.delete_message(chat_id, message.message_id)
                bot.send_message(chat_id, f"‚õî –° –æ—Ç—á–µ—Ç–æ–º —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!")
    else:
        bot.reply_to(message, f"–£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫–æ –º–Ω–µ!")

@bot.message_handler(func=lambda message: message.text.startswith('//report_') or message.text.startswith(r'/report_'))
def execute_command(message):
    if message.from_user.id in allowed_users:
        try:
            # –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç—á–µ—Ç–∞ –ø–æ –µ–≥–æ –Ω–æ–º–µ—Ä—É num, –ø—Ä–∏–º–µ—Ä: \report 6                       
            report_id =""
            report_num = message.text.split('/report_')[1]
            bot.reply_to(message, report_num)            
            
            try:
                report_id = json.loads(reps[int(report_num)])
            except IndexError:
                report_id = "null"            

            if not report_id == "null":
                url = f'https://{kumaAddr}:7220/api/private/reports/id/{report_id["id"]}/download?format=pdf'
                bot.send_message(message.chat.id, f"–§–∞–π–ª –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...")
                response = session.get(url, headers = cooks, verify=False)                
                if int(response.status_code) == 200:
                    with open("/opt/kaspersky/kuma/correlator/0b9200ae-d5a9-41ce-bf7b-c16814ed9524/scripts/doc.pdf", "wb") as f:
                        f.write(response.content)
                        f.close()                    
                    doc = open("/opt/kaspersky/kuma/correlator/0b9200ae-d5a9-41ce-bf7b-c16814ed9524/scripts/doc.pdf", "rb")
                    bot.send_document(message.chat.id, doc)
                    doc.close()                   
                else:
                    bot.reply_to(message, f"‚õî –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç!")
            else:
                bot.reply_to(message, f"‚õî –° –æ—Ç—á–µ—Ç–æ–º —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!")
        except Exception as e:
            bot.reply_to(message, f"Error occured:\n\n{str(e)}")
    else:
        bot.reply_to(message, f"–£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫–æ –º–Ω–µ!")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ö–æ–¥—è—â–∏—Ö TCP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
# nc 127.0.0.1 16667 <<< $'‚ö†Ô∏è–ê–ª–µ—Ä—Ç \n$NAME\n–¢–µ–∫—Å—Ç –ø–æ—Å–ª–µ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏'
#@bot.message_handler(func=lambda message: True)
def tcp_server():
    host = '127.0.0.1'
    port = 16667

    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_socket.bind((host, port))
    server_socket.listen(5)

    while True:
        try:
            client_socket, client_address = server_socket.accept()
            message = client_socket.recv(1024).decode('utf-8')
            for chat_id in allowed_users:
                # Create a reply markup with a button
                #bot.send_message(chat_id, message, parse_mode='HTML', reply_markup=gen_markup())
                keyboard = types.InlineKeyboardMarkup()
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á—Ç–æ–±—ã –ø–æ—è–≤–∏–ª—Å—è –µ–≥–æ ID
                sent_message = bot.send_message(chat_id, message, parse_mode='HTML', reply_markup=keyboard)
                button = types.InlineKeyboardButton(text=f"–ó–∞–∫—Ä—ã—Ç—å –∞–ª–µ—Ä—Ç", callback_data=f"button_pressed_{sent_message.message_id}")
                keyboard.add(button)
                # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è callback_data
                bot.edit_message_reply_markup(chat_id, sent_message.message_id, reply_markup=keyboard)
                # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                #bot.register_next_step_handler(sent_message, process_callback)
            client_socket.close()
        except Exception as e:
            bot.reply_to(message, f"Error occured while tcp message received:\n\n{str(e)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
def handle_exit(signum, frame):
    global tcp_server_running
    logging.info("Received signal to exit. Stopping TCP server.")
    tcp_server_running = False
    os._exit(0)

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
signal.signal(signal.SIGINT, handle_exit)
signal.signal(signal.SIGTERM, handle_exit)


#def process_callback(message):
#    # –í —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —à–∞–≥–∏ –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É
#    pass

@bot.callback_query_handler(func=lambda call: True)
def handle_button_click(call):
    print(call.message.from_user.id)
    print(call.message.from_user)
    print(call.message)
    print("||||||||||||||||||||||||")
    if call.message.from_user.id in allowed_users:
        if call.data.startswith("button_pressed_"):
            chat_id = call.message.chat.id
            try:
                #bot.send_message(chat_id, f"–í—ã –Ω–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É –∏ –≤–æ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:\n{call.message.text}")
                
                matches = re.findall(ruleNameRegex, call.message.text)
                # –í—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤–æ–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                if matches:
                    search_substring = matches[0]
                    search_substring = search_substring[:-2]
                    response = requests.request("GET", kumaGetAlerts, headers=headers, verify=False)
                    json_data = json.loads(response.text)
                    #print(json_data)
                    result_ids = find_id_by_substring(json_data, search_substring)
                    #print(result_ids)
                    # –ø–µ—Ä–µ—á–∏—Å–ª—è–µ–º –≤—Å–µ ID –∞–ª–µ—Ä—Ç–æ–≤ —Å —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ–º —Å –ø–æ–¥—Å—Ç—Ä–æ–∫–æ–π –ø–æ–∏—Å–∫–∞
                    if result_ids:
                        print(f"–ù–∞–π–¥–µ–Ω—ã —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –¥–ª—è –ø–æ–¥—Å—Ç—Ä–æ–∫–∏ '{search_substring}', —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ ID:")
                        for item_id in result_ids:        
                            payload = json.dumps({"id": item_id, "reason": "responded"})
                            response = requests.request("POST", kumaCloseAlerts, headers=headers, data=payload, verify=False)
                            if int(response.status_code) == 204:
                                bot.send_message(chat_id, f"–ê–ª–µ—Ä—Ç: {search_substring}\nID: {item_id}\n–ó–ê–ö–†–´–¢")
                    else:
                        print(f"–ù–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –¥–ª—è –ø–æ–¥—Å—Ç—Ä–æ–∫–∏ '{search_substring}'.")
                        bot.send_message(chat_id, f"–ê–ª–µ—Ä—Ç: {search_substring} –û–¢–°–£–¢–°–¢–í–£–ï–¢")
                    #bot.send_message(chat_id, f"–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ: {result}")
                else:
                    print(r"–°–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")           
                bot.delete_message(chat_id, call.message.message_id)
            except ValueError:
                logging.error("Invalid message_id in callback_data.")
            except telebot.apihelper.ApiException as api_exception:
                logging.error(f"Telegram API exception: {api_exception}")
    else:
        bot.reply_to(call.message, f"–£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫–æ –º–Ω–µ!")

# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
tcp_thread = threading.Thread(target=tcp_server)
tcp_thread.start()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
   bot.polling(none_stop=True, interval=0, timeout=60, long_polling_timeout=60)
